apply plugin: 'java'
apply plugin: 'application'

import java.io.File
import java.nio.file.Files
import java.nio.file.Paths

mainClassName = 'org.vpac.worker.Main'

dependencies {
    compile (
        'com.typesafe.akka:akka-cluster_2.11:2.4.2',
        'com.typesafe.akka:akka-cluster-tools_2.11:2.4.2',
        'commons-net:commons-net:3.4',
        files('/usr/lib/gdal.jar'),
        project(':rsaquery'),
        project(':storagemanager'),
    )

    runtime (
        project(':rsaquery').sourceSets.filter.output,
    )

    testCompile (
        sourceSets.main.output,
    )
}

jar {
    manifest {
        attributes("Implementation-Title": "rsaworkers")
    }
}

startScripts {
    // Workaround for application plugin setting the wrong classpath for the
    // config directory: It's in src/dist/config, which gets copied to
    // APP_HOME/config.
    // https://issues.gradle.org/browse/GRADLE-2333
    // http://stackoverflow.com/a/18712556/320036
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replaceFirst(
            /%APP_HOME%\\lib\\config(:|$)/,
            '%APP_HOME%\\config$1')
        unixScriptFile.text  = unixScriptFile.text.replaceFirst(
            /APP_HOME\/lib\/config(:|$)/,
            'APP_HOME/config$1')
    }
    // Create a symlink to the primary config directory. An alternative is to
    // create a symlink as src/dist/config, but in that case the contents of
    // the directory get *copied* to the output directory, which makes
    // overriding config (e.g. with a Docker volume) difficult.
    doLast {
        def link = Paths.get(outputDir.path + '/config')
        def target = Paths.get(rootDir.path + '/../config')
        println "ln -s $target $link"
        Files.createSymbolicLink link, target
    }
}

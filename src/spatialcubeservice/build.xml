<?xml version="1.0" encoding="UTF-8"?>
<project name="SpatialCubeService" default="war" basedir=".">
	<description>Build file for the rsa spatialcubeservice</description>

	<!-- Project directories, referenced below -->
	<property name="src" location="src/main/java" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="doc" location="doc" />
	<property name="inc" location="lib" />
	<property name="config" location="config" />
	<property name="bin" location="bin" />

	<!--  Web application context. ${app.name} will be the name of the .war
	      file, and therefore the name of the context root.
	      NOTE: When using deployOnStartup, "the context path *may not* be
	      defined in a META-INF/context.xml embedded in the application."
	      http://tomcat.apache.org/tomcat-6.0-doc/config/context.html -->
	<property name="app.name" value="rsa" />
	<property name="app.path" value="/${app.name}" />

	<!-- Versions numbers are populated by master build file; see ../build.xml. -->
	<property name="version.number" value="local" />
	<property name="svn.info.lastRev" value="rN"/>
	<property name="storagemanager.app.name" value="storagemanager" />

	<!-- Web archive (WAR) file definitions -->
	<property name="warfile" value="${app.name}_${version.number}_${svn.info.lastRev}-dev.war" />

	<!-- Tomcat manager definitions for deployment tasks -->
	<property name="tomcat.manager.url" value="http://localhost:8080/manager/html" />
	<property name="tomcat.manager.username" value="admin" />
	<property name="tomcat.manager.password" value="iet6Theengohchae" />

	<!-- Project Dependencies -->
	<property name="storagemanager" location="../${storagemanager.app.name}" />
	<property name="storagemanagerSrc" location="../storagemanager/src" />
	<property name="storagemanagerConfig" location="../storagemanager/config" />
	<property name="storagemanagerDist" location="../storagemanager/dist" />
	<property name="storagemanagerInc" location="../storagemanager/lib" />
	<property name="storagemanagerAntFile" location="${storagemanager}/build.xml" />
	<property name="storagemanagerResources" location="../storagemanager/resources" />
	<property name="rsaquerySrc" location="../rsaquery/src" />
	<property name="rsaqueryFilterSrc" location="../rsaquery/filter-src" />
	<property name="webRoot" location="src/main/webapp" />

	<!-- Make sure gdal library location is correct for production -->
	<available property="gdallib" file="C:\tmp\gdalapps\bin\gdal.jar" value="C:\tmp\gdalapps\bin"></available>
	<available property="gdallib" file="/usr/lib/libgdal.so.*" value="/usr/lib"></available>
	<available property="gdallib" file="/usr/local/lib/libgdal.so.*" value="/usr/local/lib"></available>

	<available property="gdaljar" file="C:\tmp\gdalapps\bin\gdal.jar" value="C:\tmp\gdalapps\bin\gdal.jar"></available>
	<available property="gdaljar" file="/usr/share/java/gdal.jar" value="/usr/share/java/gdal.jar"></available>
	<available property="gdaljar" file="/usr/local/lib/gdal.jar" value="/usr/local/lib/gdal.jar"></available>

	<property name="target" value="1.8" />
	<property name="source" value="1.8" />

	<condition property="tomcatLib" value="C:\work\apps\install\apache-tomcat-6.0.26\lib">
		<os family="windows" />
	</condition>
	<condition property="tomcatLib" value="/usr/share/tomcat6/lib">
		<os family="unix" />
	</condition>

	<path id="classpath">
		<fileset dir="${webRoot}/WEB-INF/lib">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${tomcatLib}/">
			<include name="*.jar" />
		</fileset>
		<pathelement location="${gdaljar}" />
	</path>

	<path id="storageManager-classpath">
		<fileset dir="${storagemanagerInc}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<target name="dist" depends="war" />

	<!-- Initialisation -->
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${dist}" />
		<mkdir dir="${doc}" />
	</target>

	<!-- Clean up temporary build directories -->
	<target name="clean">
		<delete dir="${build}" quiet="true" />
		<delete dir="${dist}" quiet="true" />
		<delete dir="${doc}" quiet="true" />
	</target>

	<!-- Copies dependencies from SpatialCubeService (html, js code) 
	     and the storagemanager (lots of jar files) -->
	<target name="copy-resources">
		<!-- Non-configuration resources -->
		<copy todir="${build}">
			<fileset dir="${storagemanagerResources}">
				<include name="**/*.xml" />
			</fileset>
		</copy>
		<copy todir="${build}">
			<fileset dir="${src}">
				<include name="**/filter-pack.cfg" />
			</fileset>
			<fileset dir="${storagemanagerSrc}">
				<include name="**/filter-pack.cfg" />
			</fileset>
			<fileset dir="${rsaquerySrc}">
				<include name="**/filter-pack.cfg" />
			</fileset>
			<fileset dir="${rsaqueryFilterSrc}">
				<include name="**/filter-pack.cfg" />
			</fileset>
		</copy>

		<!-- copy config. Because this combines the contents of several
		     directories, the readme files are concatenated. Also, .SAMPLE files
		     are renamed. Due to the way the globbing works, we need multiple
		     copy tasks here. -->
		<!-- NOTE! These rules are a bit touchy, and it's easy to miss something.
		     If you need to change this, verify that the resulting archive
		     varies from the old one in the way you intended by examining its
		     contents. You might also like to apply the same changes to
		     ../cmdclient/build.xml. -->
		<copy todir="${build}" flatten="false" verbose="true" overwrite="true">
			<fileset dir="${storagemanagerConfig}">
				<exclude name="*.SAMPLE"/>
			</fileset>
			<fileset dir="${config}">
				<exclude name="*.SAMPLE"/>
				<exclude name="README.txt"/>
			</fileset>
		</copy>
		<!-- .SAMPLE files override the user-edited ones to prevent testing
		     passwords etc. from being leaked. -->
		<copy todir="${build}" flatten="false" verbose="true" overwrite="true">
			<fileset dir="${storagemanagerConfig}" />
			<globmapper from="*.SAMPLE" to="*"/>
		</copy>
		<!-- Override some of the storagemanager's default config -->
		<copy todir="${build}" flatten="false" verbose="true" overwrite="true">
			<fileset dir="${config}" />
			<globmapper from="*.SAMPLE" to="*"/>
		</copy>

		<!-- Libraries; ignore directory structure of source -->
		<copy todir="${webRoot}/WEB-INF/lib" flatten="true" verbose="true">
			<path refid="storageManager-classpath" />
		</copy>
	</target>

	<!-- Compile the java code -->
	<target name="compile" depends="init" description="compile the source">
		<mkdir dir="${build}" />
		<echo message="Java home = ${java.home}" />
		<javac destdir="${build}" source="${source}" target="${target}" debug="on" debuglevel="lines,vars,source">
			<classpath refid="classpath" />
			<src path="${src}" />
			<!-- Include dependencies. These don't compile to intermediate jar files
			     that can be added to the classpath. -->
			<src path="${storagemanagerSrc}" />
			<src path="${rsaquerySrc}" />
			<src path="${rsaqueryFilterSrc}" />
		</javac>
	</target>

	<!-- Web archive file creation (this is consumed by Tomcat). -->
	<target name="war" depends="clean,compile,copy-resources,source">
		<mkdir dir="${dist}" />
		<!-- Package up WAR file. If there are duplicate files this task will
		     fail, because it indicates a bug! Avoid duplicates by explicitely
		     excluding them. -->
		<war destfile="${dist}/${warfile}" webxml="${webRoot}/WEB-INF/web.xml" update="true" duplicate="fail">
			<classes dir="${build}" />
			<fileset dir="${webRoot}">
				<exclude name="WEB-INF/classes/**" />
				<exclude name="WEB-INF/lib/**" />
			</fileset>
			<lib dir="${webRoot}/WEB-INF/lib" />
			<!-- Contents of META-INF are included automatically. -->
		</war>
	</target>

	<!-- Create javadoc for the SpatialCubeService project -->
	<target name="javadoc">
		<javadoc access="public" author="true" classpathref="classpath" destdir="${doc}" doctitle="SpatialCubeService Documentation" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" source="${source}" sourcepath="${src};${storagemanagerSrc};${rsaquerySrc};${rsaqueryFilterSrc}" splitindex="true" use="true" version="true" />

		<!-- Zip javadocs into a zipped file -->
		<zip destfile="${dist}/${app.name}-JAVADOC.zip" basedir="${doc}" update="false" whenempty="fail" compress="true" />

		<!-- Create javadoc for the storagemanager project -->
		<ant antfile="${storagemanagerAntFile}" target="javadoc" dir="${storagemanager}" inheritall="false" />

		<!-- Copies API for SpatialCubeService -->
		<copy file="${storagemanager}/dist/${storagemanager.app.name}-JAVADOC.zip" toDir="${dist}" />
	</target>

	<!-- Create souce code compilation for the SpatialCubeService project -->
	<target name="source">
		<!-- Zip source into a zipped file -->
		<zip destfile="${dist}/${app.name}_SOURCE.zip" basedir="src" />

		<!-- Zip source into a zipped file -->
		<ant antfile="${storagemanagerAntFile}" target="source" dir="${storagemanager}" inheritall="false" />

		<!-- Copies source for SpatialCubeService -->
		<copy file="${storagemanager}/dist/${storagemanager.app.name}_SOURCE.zip" toDir="${dist}" />
	</target>

	<path id="tomcat">
		<pathelement location="${tomcatLib}/catalina-ant.jar"/>
	</path>

	<!-- Tomcat task definitions. These require catalina-ant.jar to be on the
	     classpath (in Eclipse, see External Tools Configurations). You can find
	     the jar file in the lib/ directory of your Tomcat installation. -->
	<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="tomcat" />
	<taskdef name="install" classname="org.apache.catalina.ant.InstallTask" classpathref="tomcat" />
	<taskdef name="list" classname="org.apache.catalina.ant.ListTask" classpathref="tomcat" />
	<taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask" classpathref="tomcat" />
	<taskdef name="remove" classname="org.apache.catalina.ant.RemoveTask" classpathref="tomcat" />
	<taskdef name="resources" classname="org.apache.catalina.ant.ResourcesTask" classpathref="tomcat" />
	<taskdef name="roles" classname="org.apache.catalina.ant.RolesTask" classpathref="tomcat" />
	<taskdef name="start" classname="org.apache.catalina.ant.StartTask" classpathref="tomcat" />
	<taskdef name="stop" classname="org.apache.catalina.ant.StopTask" classpathref="tomcat" />
	<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask" classpathref="tomcat" />

	<target name="remove">
		<echo message="removing demo" />
		<remove url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}" path="${app.path}" failonerror="false" />
	</target>

	<!-- Deploy the WAR file on TomCat manager -->
	<target name="deploy" depends="war, remove">
		<echo message="deploying" />
		<deploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}" path="${app.path}" war="file:${dist}/${warfile}" />
	</target>

	<!-- Undeploy the WAR file on TomCat manager -->
	<target name="undeploy">
		<echo message="undeploying" />
		<undeploy url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}" path="${app.path}" />
	</target>
</project>
